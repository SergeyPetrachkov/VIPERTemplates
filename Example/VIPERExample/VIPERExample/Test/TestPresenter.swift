//
//  TestPresenter.swift
//  VIPERExample
//
//  Created by Sergey Petrachkov on 26/12/2017.
//  Copyright (c) 2017 Sergey Petrachkov. All rights reserved.
//
//  This file was generated by the SergeyPetrachkov VIPER Xcode Templates so
//  you can apply VIPER architecture to your iOS projects
//

import UIKit

protocol TestPresenterInput: class {
  var view: UIViewController! { get set }
  var output: TestPresenterOutput? { get set }
  var router: TestRoutingLogic? { get set }
  var interactor: TestInteractorInput? { get set }
  func presentSomething()
}
protocol TestPresenterOutput: class {
  func didChangeState(viewModel : Test.DataContext.ViewModel)
}

class TestPresenter: TestPresenterInput {
  // MARK: - Essentials
  weak var view: UIViewController!
  weak var output: TestPresenterOutput?
  var viewModel: Test.DataContext.ViewModel!
  var router: TestRoutingLogic?
  var interactor: TestInteractorInput?
  // MARK: - Initializers
  init(moduleIn: Test.DataContext.ModuleIn) {
    self.viewModel = Test.DataContext.ViewModel(moduleIn: moduleIn)
  }
  deinit {
    print("TestPresenter deinit is called")
  }
  // MARK: - Presenter Input
  func presentSomething() {
    // ask router to navigate somewhere or ask interactor for resources... it's up to you
    // like:
    // let requestParams = RequestParams()
    // self.interactor.getSomeData(requestParams: requestParams)
    // or:
    // let routingParams = RoutingParams(firstValue : self.viewModel.firstValue, secondValue: self.viewModel.secondValue)
    // self.router.showNextModule(from: self.view, with: routingParams)
  }
}
extension TestPresenter: TestInteractorOutput {
  // MARK: - Interactor output
  func didReceive(response: Test.DataContext.Response) {
    // Process it and act accordingly like:
    // self.output?.didChangeState(viewModel : )
  }
  func didFail(with error: Error) {
//    self.router.showError(error: error)
  }
}