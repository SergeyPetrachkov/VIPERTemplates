//
//  PlainCodePresenter.swift
//  VIPERExample
//
//  Created by Sergey Petrachkov on 20/09/2017.
//  Copyright (c) 2017 Sergey Petrachkov. All rights reserved.
//
//  This file was generated by the SergeyPetrachkov VIPER Xcode Templates so
//  you can apply VIPER architecture to your iOS projects
//

import UIKit

protocol PlainCodePresenterInput: class {
  var view: UIViewController! { get set }
  var output: PlainCodePresenterOutput? { get set }
  var router : PlainCodeRoutingLogic? { get set }
  var interactor : PlainCodeInteractorInput? { get set }
  func presentDialog()
}
protocol PlainCodePresenterOutput: class {
  func didChangeState(viewModel : PlainCode.DataContext.ViewModel)
}

class PlainCodePresenter: PlainCodePresenterInput {
  // MARK: - Essentials
  weak var view: UIViewController!
  weak var output : PlainCodePresenterOutput?
  var viewModel : PlainCode.DataContext.ViewModel? {
    didSet{
      guard let viewModel = self.viewModel else {
        return
        //or do something else like show placeholder
      }
      self.output?.didChangeState(viewModel: viewModel)
    }
  }
  var router : PlainCodeRoutingLogic?
  var interactor : PlainCodeInteractorInput?
  // MARK: - Initializers
  init() {
    
  }
  deinit {
    print("PlainCodePresenter deinit is called")
  }
  // MARK: - Presenter Input
  func presentDialog() {
    self.router?.showInfoModule(from: self.view)
  }
}
extension PlainCodePresenter : PlainCodeInteractorOutput {
  // MARK: - Interactor output
  func didReceive(some data: Any) {
    // Process it and act accordingly like:
    // self.output?.didChangeState(viewModel : )
  }
  func didFail(with error: Error) {
//    self.router.showError(error: error)
  }
}
