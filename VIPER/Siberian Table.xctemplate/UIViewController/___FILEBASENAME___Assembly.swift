//
//  ___FILENAME___
//  ___PROJECTNAME___
//
//  Created by ___FULLUSERNAME___ on ___DATE___.
//  Copyright (c) ___YEAR___ ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the SergeyPetrachkov VIPER Xcode Templates so
//  you can apply VIPER architecture to your iOS projects
//

import UIKit

class ___VARIABLE_moduleName___Assembly {
  // MARK: - Constants
  fileprivate static let storyboardId = "Module"
  fileprivate static let controllerStoryboardId = "___VARIABLE_moduleName___"
  // MARK: - Public methods
  static func createModule(moduleIn: ___VARIABLE_moduleName___.DataContext.ModuleIn) -> ___VARIABLE_moduleName___ViewController {
    if let controller = UIStoryboard(name: storyboardId, bundle: nil).instantiateViewController(withIdentifier: controllerStoryboardId) as? ___VARIABLE_moduleName___ViewController {
      var presenter = injectPresenter(moduleIn: moduleIn)
      presenter.output = controller
      presenter.view = controller
      controller.presenter = presenter
      return controller
    } else {
      fatalError("Could not create ___VARIABLE_moduleName___ module!!! Check ___VARIABLE_moduleName___ assembly")
    }
  }
  // MARK: - Private injections
  fileprivate static func injectPresenter(moduleIn: ___VARIABLE_moduleName___.DataContext.ModuleIn) -> ___VARIABLE_moduleName___PresenterInput {
    let presenter = ___VARIABLE_moduleName___Presenter(moduleIn: moduleIn)
    let interactor = injectInteractor()
    interactor.output = presenter
    presenter.interactor = interactor
    let router = injectRouter()
    presenter.router = router
    return presenter
  }
  fileprivate static func injectInteractor() -> ___VARIABLE_moduleName___InteractorInput {
    return ___VARIABLE_moduleName___Interactor()
  }
  fileprivate static func injectRouter() -> ___VARIABLE_moduleName___RoutingLogic {
    return ___VARIABLE_moduleName___Router()
  }
}