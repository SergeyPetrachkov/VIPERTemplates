//
//
//  ___FILENAME___
//  ___PROJECTNAME___
//
//  Created by ___FULLUSERNAME___ on ___DATE___.
//  Copyright (c) ___YEAR___ ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the SergeyPetrachkov VIPER Xcode Templates so
//  you can apply VIPER architecture to your iOS projects
//

import UIKit

protocol ___VARIABLE_moduleName___InteractorInput: class {
  init(service: ___VARIABLE_moduleName___ServiceProtocol)
  var output: ___VARIABLE_moduleName___InteractorOutput? { get set }
  func requestItems(request: ___VARIABLE_moduleName___.DataContext.Request)
}

protocol ___VARIABLE_moduleName___InteractorOutput: class {
  func didReceive(response: ___VARIABLE_moduleName___.DataContext.Response)
  func didFail(with error: Error)
}

class ___VARIABLE_moduleName___Interactor: ___VARIABLE_moduleName___InteractorInput {
  let service: ___VARIABLE_moduleName___ServiceProtocol!
  // let mapper: ___VARIABLE_moduleName___MapperProtocol!
  required init(service: ___VARIABLE_moduleName___ServiceProtocol) {
    self.service = service
  }

  weak var output: ___VARIABLE_moduleName___InteractorOutput?
  // MARK: - Input
  func requestItems(request: ___VARIABLE_moduleName___.DataContext.Request) {
    self.service.getItems(request: request,
                          success: { items in
                            // let models = items.map({ ListItemModel(currentModel: $0) })
                            // self.output?.didReceive(response: ___VARIABLE_moduleName___.DataContext.Response(originalRequest: request,
                            //                                                             items: models))
    },
                          failure: { error in
                            self.output?.didFail(with: error)
    })
  }
}
