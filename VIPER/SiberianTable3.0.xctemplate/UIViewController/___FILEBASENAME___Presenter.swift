//
//  ___FILENAME___
//  ___PROJECTNAME___
//
//  Created by ___FULLUSERNAME___ on ___DATE___.
//  Copyright (c) ___YEAR___ ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the SergeyPetrachkov VIPER Xcode Templates so
//  you can apply VIPER architecture to your iOS projects
//

import UIKit
import SiberianVIPER

protocol ___VARIABLE_moduleName___PresenterInput: Awaitable, Startable, CloseableModule {
  var view: UIViewController! { get set }
  var output: ___VARIABLE_moduleName___PresenterOutput? { get set }
  var router: ___VARIABLE_moduleName___RoutingLogic? { get set }
  var interactor: ___VARIABLE_moduleName___InteractorInput? { get set }
  func refresh()
  func fetch()
}
protocol ___VARIABLE_moduleName___PresenterOutput: AwaitableDelegate {
  func didChangeState(viewModel : ___VARIABLE_moduleName___.DataContext.ViewModel)
}

class ___VARIABLE_moduleName___Presenter: CollectionPresenter, ___VARIABLE_moduleName___PresenterInput {
  // MARK: - Essentials
  weak var view: UIViewController!
  weak var output: ___VARIABLE_moduleName___PresenterOutput?
  var viewModel: ___VARIABLE_moduleName___.DataContext.ViewModel! {
    didSet {
      self.awaitableModel = self.viewModel
    }
  }
  var router: ___VARIABLE_moduleName___RoutingLogic?
  var interactor: ___VARIABLE_moduleName___InteractorInput?
  // MARK: - Initializers
  init(moduleIn: ___VARIABLE_moduleName___.DataContext.ModuleIn) {
    self.viewModel = ___VARIABLE_moduleName___.DataContext.ViewModel(moduleIn: moduleIn)
  }
  deinit {
    print("___VARIABLE_moduleName___Presenter deinit is called")
  }
  // MARK: - Presenter Input
  func refresh() {
    _ = try? self.fetchItems(reset: true)
  }
  func fetch() {
    _ = try? self.fetchItems(reset: false)
  }
  // MARK: - Startable
  override func start() {
    super.start()
    self.awaitableDelegate = self.output
    self.awaitableModel = self.viewModel
    self.collectionModel = self.viewModel
    _ = try? self.fetchItems(reset: true)
  }
  // MARK: - Base overrides
  @discardableResult override func fetchItems(reset: Bool) throws -> (skip: Int, take: Int) {
    do {
      let skipTake = try super.fetchItems(reset: reset)
      self.interactor?.requestItems(request: ___VARIABLE_moduleName___.DataContext.Request(skip: skipTake.skip, take: skipTake.take))
      return skipTake
    } catch let error {
      throw error
    }
  }
}
extension ___VARIABLE_moduleName___Presenter: ___VARIABLE_moduleName___InteractorOutput {
  // MARK: - Interactor output
  func didReceive(response: ___VARIABLE_moduleName___.DataContext.Response) {
    if response.originalRequest.paginationParams.skip == 0 {
      self.viewModel.items = []
    }
    response.items.enumerated().forEach({ (offset, _) in
      self.viewModel.changeSet.append(.new(IndexPath(row: self.viewModel.items.count + offset, section: 0)))
    })
    
    self.viewModel.items.append(contentsOf: response.items as [CollectionModel])
    self.output?.didChangeState(viewModel: self.viewModel)
    self.exitPendingState()
  }

  func didFail(with error: Error) {
    self.exitPendingState()
  }
}