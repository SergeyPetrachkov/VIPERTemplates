//
//  ___FILENAME___
//  ___PROJECTNAME___
//
//  Created by ___FULLUSERNAME___ on ___DATE___.
//  Copyright (c) ___YEAR___ ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Actonica VIPER Xcode Templates so
//  you can apply VIPER architecture to your iOS projects
//

import UIKit

protocol ___VARIABLE_moduleName___InteractorInput {
  var output : ___VARIABLE_moduleName___InteractorOutput? { get set }
  func doSomething(request: ___VARIABLE_moduleName___.DataContext.Request)
}

protocol ___VARIABLE_moduleName___InteractorOutput {
  func didReceive(some data : Any)
  func didFail(with error: Error)
}

protocol ___VARIABLE_moduleName___DataStore {
  //var name: String { get set }
}

class ___VARIABLE_moduleName___Interactor: ___VARIABLE_moduleName___InteractorInput, ___VARIABLE_moduleName___DataStore {
  let service: ___VARIABLE_moduleName___Service = ___VARIABLE_moduleName___Service()
  var output: ___VARIABLE_moduleName___InteractorOutput?
  
  // MARK: Do something
  func doSomething(request: ___VARIABLE_moduleName___.DataContext.Request) {
    // Let's say we execute some async operation, then we want to be able to inform our output when the operation is finshed
    // self.service.requestSomeDataAsync(requestParams: params, 
    //                                          succes: {
    //                                            receivedData in
    //                                              self.output?.didReceive(some: receivedData)
    //                                          }),
    //                                          failure: {
    //                                            error in 
    //                                              NSLog("An error has occured while retrieving some data: \(error)")
    //                                              self.output?.didFail(error: error)
    //                                          })
    self.service.doSomeWork()
  }
}
